
@model PaginatedList<RFC.Models.CreateNew>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var priorityList = Html.GetEnumSelectList<Priority>();
}

<div id="right">
    <div class="header" style="display:flex; justify-content: space-between;">
        <h1 style="display:inline-block; width:auto; vertical-align: top;">Requests</h1>
        <div class="buttons" style="margin-top: 0px; display:inline-block;width:auto;vertical-align: top;">
            <div class="otherButtons">
                <a style="width: 100%" class="button submit btn btn-default" asp-area="" asp-controller="Home" asp-action="Index">Go Back</a>
            </div>
        </div>
    </div>
    <div class="rightContent">
        @using (Html.BeginForm())
        {
        <p id="filter">
            Find in
            @Html.DropDownList("ColumnSelect", "Select a Column")
            by:
            @Html.TextBox("searchString", null, new { style = "background-color: #e7e7e7;", list = "datalist", autocomplete="off"}) @*It just works :)*@
            @Html.TextBox("DateTo")
            <ej-date-range-picker id="DateRange" date-format="dd/MM/yyyy" width="200px"></ej-date-range-picker>
            <input type="submit" value="Search" />
            <datalist id="datalist"></datalist>
        </p>
        }
        <table class="table table-bordered table-condensed table-striped table-hover">
            <thead>
                <tr>
                    <th>
                        @Html.ActionLink("ID" + (string.IsNullOrEmpty(ViewBag.sortOrder) ? " ▼" : "") + (ViewBag.sortOrder == "IDDesc" ? " ▲" : ""), "Index", new { sortOrder = ViewBag.IDSortParm })
                    </th>
                    <th>
                        @Html.ActionLink("Priority" + (ViewBag.sortOrder == "RFCTypeAsc" ? " ▼" : "") + (ViewBag.sortOrder == "RFCTypeDesc" ? " ▲" : ""), "Index", new { sortOrder = ViewBag.RFCTypeSortParm })
                    </th>
                    <th>
                        @Html.ActionLink("Product Name" + (ViewBag.sortOrder == "ProductNameAsc" ? " ▼" : "") + (ViewBag.sortOrder == "ProductNameDesc" ? " ▲" : ""), "Index", new { sortOrder = ViewBag.ProductNameSortParm })
                    </th>
                    <th>
                        @Html.ActionLink("Customer Name" + (ViewBag.sortOrder == "CustomerNameAsc" ? " ▼" : "") + (ViewBag.sortOrder == "CustomerNameDesc" ? " ▲" : ""), "Index", new { sortOrder = ViewBag.CustomerNameSortParm })
                    </th>
                    <th>
                        @Html.ActionLink("Requested Due Date" + (ViewBag.sortOrder == "RequestedDueDateAsc" ? " ▼" : "") + (ViewBag.sortOrder == "RequestedDueDateDesc" ? " ▲" : ""), "Index", new { sortOrder = ViewBag.RequestedDueDateSortParm })
                    </th>
                    <th>
                        @Html.ActionLink("Approved" + (ViewBag.sortOrder == "ApprovedAsc" ? " ▼" : "") + (ViewBag.sortOrder == "ApprovedDesc" ? " ▲" : ""), "Index", new { sortOrder = ViewBag.Approved })
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                <tr class="d-table-row" id="table-row" data-href=@("/CreateNew/Details/" + item.ID)>
                    <td>
                        @Html.DisplayFor(modelItem => item.ID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Priority)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Product)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CustomersAffected)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DueDate)
                    </td>
                    <td>
                        @(item.Approved ? "✓" : "✕")
                    </td>
                </tr>
                }
            </tbody>
        </table>
        <div class="buttons">
            <div class="formButtons">
                <a asp-action="Index"
                   asp-route-sortOrder="@ViewData["CurrentSort"]"
                   asp-route-pageNumber="@(Model.PageIndex - 1)"
                   asp-route-currentFilter="@ViewData["CurrentFilter"]"
                   class="button submit btn btn-default @(!Model.HasPreviousPage ? "disabled" : "")">
                    Previous
                </a>
                <a asp-action="Index"
                   asp-route-sortOrder="@ViewData["CurrentSort"]"
                   asp-route-pageNumber="@(Model.PageIndex + 1)"
                   asp-route-currentFilter="@ViewData["CurrentFilter"]"
                   class="button submit btn btn-default @(!Model.HasNextPage ? "disabled" : "")">
                    Next
                </a>
            </div>
            <div>
                <button id="weeklyAgenda" onclick="weeklyAgenda()">Weekly Agenda</button>
            </div>
        </div>
    </div>
</div>


<style>

    #table-row td:hover {
        cursor: pointer;
    }
    #weeklyAgenda {
        display : none;
    }
</style>


<script src="~/lib/jquery/dist/jquery.js"></script>
<script>
    var input = document.getElementById("searchString");
    input.value = "";
    var dateRangeTo = document.getElementById("DateTo");
    var datalist = document.getElementById("datalist");
    dateRangeTo.type = "date";
    dateRangeTo.format = "{0:yyyy-MM-dd}";

    dateRangeTo.style.display = "none";
    window.onload = testfunction;

    $('#ColumnSelect').on('change', function () {
        var index = $(this).find('option:selected').index();
        switch (index) {
            case 2:
                datalist.innerHTML = `<option value="Retrospective"></option>
                                      <option value="Normal"></option>
                                      <option value="Emergency"></option>`;
                break;
            case 3:
                datalist.innerHTML = `<option value="RIO"></option>
                                      <option value="Flow"></option>
                                      <option value="Oceano"></option>
                                      <option value="Conexes"></option>
                                      <option value="Mosaic"></option>`;
                break;
            case 5:
                dateRangeTo.value = "";
                input.type = "date";
                input.format = "{0:yyyy-MM-dd}";
                dateRangeTo.style.display = "inline-block";
                document.getElementById("weeklyAgenda").style.display="inline-block";
                break;
            default:
                datalist.innerHTML = "";
                input.type = "text";
                input.format = null;
                dateRangeTo.innerHTML = "";
                dateRangeTo.style.display = "none";
                document.getElementById("weeklyAgenda").style.display="none";
                break;
        }
    })

    function testfunction() {

        var columnselect = document.getElementById("ColumnSelect");

        if (columnselect.options[columnselect.selectedIndex].text == "Requested Due Date") {
            input.type = "date";
            input.format = "{0:yyyy-MM-dd}";
            dateRangeTo.style.display = "inline-block";
        }
    }


</script>

<script type="text/javascript">
    $(document).ready(function ($) {
        $(".d-table-row").click(function () {
            window.document.location = $(this).data("href");
        });
    });
</script>

<script src="~/lib/moment/moment.min.js"></script>
<script>

    function weeklyAgenda()
    {

        var todayDate = moment().format("YYYY-MM-DD");
        var lastWeek = moment().subtract(7, "day").format("YYYY-MM-DD");

        console.log(todayDate);
        console.log(lastWeek);


        var dateFrom = document.getElementById("searchString");
        var dateTo = document.getElementById("DateTo");

        dateFrom.value = lastWeek;      //line252
        dateTo.value = todayDate;       //line253

        //const sevenDays = (60 * 60 * 24 * 7);
        //var today = new Date();
        //var lastWeek = ((today.getTime) - (60 * 60 * 24 * 7));

        
        //console.log(today);
        //console.log(sevenDays);
        //console.log(lastWeek);
        //var todayDate = new Date();
        //todayDate.setDate(todayDate.getDate());
        //console.log(todayDate.getDay());

        //var lastWeek = new Date();
        //lastWeek.setDate((lastWeek.getDate() - 7));
        //console.log(lastWeek);
    }


</script>

@*Credit to https://www.tutorialsplane.com/bootstrap-make-table-row-clickable/*@